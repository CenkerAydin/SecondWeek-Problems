TEMEL TÜRLER & NULL GÜVENLİĞİ
1. Val ile var arasındaki fark nedir?
- val ve var Kotlin dilinde değişken oluştururken kullandığımız keywordlerdir. Val keywordu readOnly'dir. O yüzden bir kez oluşturduktan sonra değerini değiştiremeyiz. Var keywordu ile tanımladığımız değişkeni sonradan isteğimize ve duruma göre değiştirebiliriz. Akılda kalması açısında val (value) var (variable) olarak düşünülebilir.

2. Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.
- Bir var değişkeninin val keywordunu kullanmadan val gibi davranmasını onun setini private yaparak sağlayabiliriz. Bunu yapmak istememizdeki ana sebep değişkenin değerinin bir kez atanmasını ve ondan sonra değiştirilmemesini istediğimiz zaman yaparız. Örnek olarak bir banka uygulamasında kullanıcı hesap oluşturulduğunda hesap numarasını saklamamız gerektiğinde kullanabiliriz.

3."Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?
- Immutable (Değişmez) -> Bir değişkenin veya nesnenin durumu asla ilk değerden farklı olamaz.
  ReadOnly (Salt Okunur) -> İlk değer atamasından sonra tekrar değer atanmaz demektir.
Val değişkenlerin salt okunur (readonly) olmasının sebebi bir kez değer atandıktan sonra tekrar değer atanamaz.

4."Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?
- Type inference (Tip Çıkarımı), bir programlama dilinde bir değişkenin tipini yazmadan otomatik olarak belirlenmesidir. Kodun daha temiz ve okunabilir olmasını sağlar. Belirsizlik durumunda ve performans optimizasyonun önemli olduğu projelerde tip belirtmek gereklidir.

5.Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?
-Hayır. Kotlin'de tüm değişkenlerin sınıf olarak bulunması, primitive type olmadıkları anlamına gelmez. Derleme sırasında sınıf olarak bulunan değişkenler primitive type haline optimizasyonu sağlanır.

6."Tip Güvenliği" (Type Safety) kavramını açıklayın.
-Type safety, bir programın derleme sırasında değişken tiplerinin uygun şekilde kullanılmasını ve varsa uyumsuzlukların önlenmesini sağlar.

7.Bir değişkeni nullable yapmak için ne yapmalıyız?
-Bir değişkeni nullable yapmak için değişken tipinin sonuna ? ifadesi koyulmalıdır.

8."Null Güvenliği" (Null Safety) kavramını açıklayın.
-Bir kod parçacığında beklenmedik ve istenmeyen şekilde NullPointerException hatası fırlatacak durumları önceden tespit ederek bu tür hataları önlemesidir.

9.Bir değişkene null değer atanır ve tip belirtilmezse Kotlin bu değişkeni nasıl yorumlar?
-Bir değişkene null değer atanır ve tip belirtmezse Kotlin bu değişkeni Nothing? olarak yorumlar.

10.İlkel bir değişkenin nullable olması ile null değer alamaması arasında bellek yönetimi açısından nasıl farklar vardır?
-İlkel bir değişkenin nullable olması ile null değer alamaması arasında bellek yönetimi açısından önemli farklar vardır.
Nullable bir değişken, bellekte ilave bir boşluk ayırır. Null değer alamayan ilkel bir değişken ise bellekte sadece değeri için alanı ayırır. Yani nullable değişkenlerin bellek kullanımı null değer alamayan ilkel değişkenlere göre daha fazladır.

11.Nullable bir değişkenin bir değere sahip olması ile null olması arasında bellek yönetimi açısından nasıl bir fark vardır? Null değer almış bir değişken bellekte yer kaplamaz diyebilir miyiz?
-Null değer alan bir değişkenin hala bellekte bir alanı kaplar. Ancak, bu alanın içeriği null olduğu için bir değeri göstermez. Null değer alan bir değişken, değer atanmış bir değişkene göre daha az yer kaplar. Null değer almış bir bellekte yer kaplamaz diyemeyiz dolayısıyla.

12.Nullable bir değişkenle çalışırken hangi operatörleri kullanırız? Bu operatörlerin kullanım farkları nelerdir? Hangisini ne zaman kullanmak daha anlamlıdır?
-Nullable bir değişkenle çalışırken !!. ve ?. operatörlerini kullanırız. !!. operatörü değişkenin null olamayacağının garantisini vereceğimiz zaman kullanmalıyız. ?. operatörü de değişken null değilse çalışsın istediğimiz zaman kullanmalıyız. Kodun önemli bir yerinde yani eğer bir hata verdiğinde uygulama crash yicekse !! operatörünü, daha az önemli yerlerde ?. kullanmak daha faydalıdır.

SAYILAR
1.Kaç farklı tipte "Number" sınıfı miras alan "alt sınıf" (Child class) vardır? Bunların değer aralıkları neden önemlidir?
-"Number" sınıfını miras alan 6 tane Child class vardır. Bunlar Byte, Short, Long, Integer, Float, Double. Değer aralıklarının bilinmesi ve buna göre kullanılması projenin performansını etkileyebilir. Bu yüzden önemlidir.

2.Eğer bir değişkene tip belirtimi yapılmaz ve bir değer atanırsa, Kotlin tip çıkarımını nasıl yapar?
-Eğer bir değişkene tip belirtimi yapılmaz ve bir değer atanırsa, Kotlin "Type Reference" yaparak onun tipini belirtir. Eğer değişkenin değer aralığı Int değer aralığı içinde veya Int değer aralığından küçükse otomatik olarak Int set edilir, Eğer İnt değer aralığından büyükse otomatik olarak Long set edilir.

3.Float değişken oluştururken F ve f harfleri varken, Long değişken oluştururken neden küçük l harfi yoktur?
-Long değişken oluştururken küçük l harfi kullanımına izin verilmez. Bunun sebebi I harfiye karıştırılabilme olasılığından dolayı.

4.Tek duyarlıklı (Single Precision) ve Çift Duyarlıklı (Double Precision) kavramlarını açıklayın.
-Single Precision (float) floating point sayıları temsil eder. Bellekte 4 byte yer kaplar. Single Precision 1 Sign bit, 8 exponent bit ve 23 mantissa bit olmak üzere 32 bit alan kaplar.
-Double Precision (double)  floating point sayıları. Bellekte 8 byte yer kaplar.  Double precision 1 sign bit, 11 exponent bit, 52 mantissa bit olmak üzere 64 alan yer kaplar.

5.Double ve Float değişkenlerle çalışırken ondalık ayıracı olarak hangi işaretler kullanılır? Bu ayıraçların kullanımında nelere dikkat etmek gerekir?
Ondalık sayıları yazarken ayıraç olarak nokta (.) ve virgül (,) kullanılır ama kotlin'de ondalık sayıları yazarken (.) kullanılır, virgül (,) kullanılmadığı için başka dillerle etkileşimde bulunurken veya kullanıcı girdilerini alırken bu durum mutlaka kontrol edilmelidir.

6.Double ve Float değişkenler ondalık kısımda kaç basamağa kadar işlem yaparlar? Bu sınırın üzerinde gelen ondalık bilgileri için nasıl davranırlar? Hangi durumlar için Float ve hangi durumlar için Double kullanılmalıdır?
-Double  değişkenler genellikle 15 haneli basamaklara kadar işlem yaparlar. Float değişkenler, genellikle 7 haneli basamaklara kadar işlem yaparlar.Bu sınırın üzerinde gelen ondalık bilgileri genellikle kaybederler veya yuvarlarlar. Daha düşük bellek kullanımı ve daha hızlı işlem için Float, yüksek hassasiyet ve daha az yuvarlama hatası için Double kullanılmalıdır.

7.Ondalık(Decimal), Onaltılık (Hexadecimal) ve İkilik (Binary) değişkenleri Kotlin'de nasıl tanımlayabilirsiniz?
Değişken şeklinde tanımlama yapabiliriz.
val decimal =1903
val hexadecimal =0x759
val binari =0b0100011 

8.Sekizlik (Octal) değişkenler Java'da nasıl tanımlanır? Kotlin'de Sekizlik değişken tanımlanabilir mi?
-Java'da Octal değişkenler 0 rakamıyla başlayan şekilde tanımlanır, Bunun ardından 0 ile 7 arasında rakamlar içerebilir. int octal= 075
Kotlin'de Octal değişkenler tanımlanamaz.

9."Geleneksel Notasyon" (Conventional Notation) gösterimi nasıl yapılır?
-Conventional Notation matematiksel ifadeleri veya aritmetik işlemleri ifade etmek için kullanılan bir notasyondur. Operatörler ve operandolar tipik olarak birbirinin yanında ve öncelik sırası ve işlem önceliğine göre belirtilir.

10.Sayısal değişkenlerde alt çizgi (underscore) nasıl kullanılır? Kotlin bunu nasıl yorumlar?
-Sayısal değişkenlerde alt çizgi büyük basamaklı sayının okunabilirliğini artırmak için kullanılır. Kotlin bunu görmezden gelerek sayının tamamını düzgün bir şekilde alır.

11.== ile neyi karşılaştırırız? === ile neyi karşılaştırırız?
- == ile değişkenlerin değerini karşılaştırırız. === ile değişkenlerin referanslarını karşılaştırır. 

12.=== operatörü ile karşılaştırma yaparken Byte değer aralığı neden önemlidir? Kotlin bu aralığa göre neden özel bir davranış sergiler?
-Byte değer aralığındaki sayılar için özel bir optimizasyon uygulanıyor ve refeneransları farklı olsa bile referans kıyaslamasında true sonucunu elde ediyoruz.

13.Sayısal değişkenlerde hangi matematiksel operatörler kullanılabilir?
-Sayısal değişkenlerde toplama (+), çıkarma (-), bölme (/), çarpma (*) gibi temel operatörler kullanılabilir. Bunların yanında % ile bir sayıya diğer sayıya bölünce kalanı bulabiliriz. ++ ile değeri 1 arttırıp -- ile değeri 1 azaltabiliriz.

14.Sayısal değişkenlerde hangi karşılaştırma operatörleri kullanılabilir?
-Sayısal değişkenlerde <, > =<, =>, == ,!= gibi operatörler kullanılabilir.